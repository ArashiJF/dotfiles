#!/usr/bin/env bash

source ./utils

distro=$(detect_distro)

_process "Detected distro $distro"

# Packages from package list
install_base_utils() {
    _process "Adding base packages"

    if [[ $distro == "Debian" ]]; then
        sudo apt update
        sudo apt -y --ignore-missing install $(<"${DIR}/opt/packages.list")
    elif [[ $distro == "Arch" ]]; then
        sudo pacman -S --needed base-devel $(<"${DIR}/opt/packages.list")
    elif [[ $distro == "Unknown" ]]; then
        _warning "Unrecognized distro"
        return
    fi
    [[ $? ]] && _success "Base dependencies added"
}

install_mise() {
    _process "Adding mise"
    curl https://mise.run | sh

    [[ $? ]] && _success "mise installed"

    _process "Adding bash completions"

    mise use -g usage
    mkdir -p ~/.local/share/bash-completion/completions
    mise completion bash --include-bash-completion-lib >~/.local/share/bash-completion/completions/mise

    [[ $? ]] && _success "mise completions added"
}

install_mise_tools() {
    _process "Adding global devtools with mise"

    mise use --global $(<"${DIR}/opt/mise.list")

    [[ $? ]] && _success "tools added"
}

install_ohmyposh() {
    _process "Add oh-my-posh prompt"
    curl -s https://ohmyposh.dev/install.sh | bash -s

    [[ $? ]] && _success "oh-my-posh installed"
}

link_dotfiles() {
    # symlink files to the HOME directory.
    if [[ -f "${DIR}/opt/files" ]]; then
        _process "→ Symlinking dotfiles in /configs"

        # Set variable for list of files
        files="${DIR}/opt/files"

        # Store IFS separator within a temp variable
        OIFS=$IFS
        # Set the separator to a carriage return & a new line break
        # read in passed-in file and store as an array
        IFS=$'\r\n'
        links=($(cat "${files}"))

        # Loop through array of files
        for index in ${!links[*]}; do
            for link in ${links[$index]}; do
                _process "→ Linking ${links[$index]}"
                # set IFS back to space to split string on
                IFS=$' '
                # create an array of line items
                file=(${links[$index]})
                # Create symbolic link
                ln -fs "${DIR}/${file[0]}" "${HOME}/${file[1]}"
            done
            # set separater back to carriage return & new line break
            IFS=$'\r\n'
        done

        # Reset IFS back
        IFS=$OIFS

        source "${HOME}/.bashrc"

        [[ $? ]] && _success "All files have been copied"
    else
        _warning "No files list found in ./opt/files"
    fi
}

setup_git_authorship() {
    GIT_AUTHOR_NAME=eval "git config user.name"
    GIT_AUTHOR_EMAIL=eval "git config user.email"

    if [[ ! -z "$GIT_AUTHOR_NAME" ]]; then
        _process "→ Setting up Git author"

        read USER_GIT_AUTHOR_NAME
        if [[ ! -z "$USER_GIT_AUTHOR_NAME" ]]; then
            GIT_AUTHOR_NAME="${USER_GIT_AUTHOR_NAME}"
            $(git config --global user.name "$GIT_AUTHOR_NAME")
        else
            _warning "No Git user name has been set.  Please update manually"
        fi

        read USER_GIT_AUTHOR_EMAIL
        if [[ ! -z "$USER_GIT_AUTHOR_EMAIL" ]]; then
            GIT_AUTHOR_EMAIL="${USER_GIT_AUTHOR_EMAIL}"
            $(git config --global user.email "$GIT_AUTHOR_EMAIL")
        else
            _warning "No Git user email has been set.  Please update manually"
        fi
    else
        _process "→ Git author already set, moving on..."
    fi
}

setup_git_ignore() {
    _process "Setting global git ignore"

    $(git config --global core.excludesFile ~/.gitignore)

    [[ $? ]] && _success "Global git ignore set"
}

# Some functions are useful to call by themselves
case "$1" in
"") ;;
install_base_utils)
    "$@"
    exit
    ;;
install_mise)
    "$@"
    exit
    ;;
install_mise_tools)
    "$@"
    exit
    ;;
link_dotfiles)
    "$@"
    exit
    ;;
install_ohmyposh)
    "$@"
    exit
    ;;
*)
    log_error "Unkown function: $1()"
    exit 2
    ;;
esac
